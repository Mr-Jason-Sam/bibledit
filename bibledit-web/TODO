Reading manual at:
file:///home/teus/library/computing/lamp/www.php.net/www.php.net/www.php.net/manual/en/language.oop5.php.html
file:///home/teus/library/computing/lamp/www.php.net/www.php.net/www.php.net/manual/en/language.oop5.overloading.php.html
file:///home/teus/library/computing/lamp/www.php.net/www.php.net/www.php.net/manual/en/language.oop5.cloning.php.html
file:///home/teus/library/computing/lamp/www.php.net/www.php.net/www.php.net/manual/en/language.oop5.references.php.html
file:///home/teus/library/computing/lamp/www.php.net/www.php.net/www.php.net/manual/en/language.references.php.html
file:///home/teus/library/computing/lamp/www.php.net/www.php.net/www.php.net/manual/en/reserved.variables.php.html
file:///home/teus/library/computing/lamp/www.php.net/www.php.net/www.php.net/manual/en/security.php.html




Independent and universal focus channels on the server.
* Everybody can listen to the "focus" on his own channel. Channels are created on the fly.
* Everybody can send his "focus".

We use a more general "ipc" table, where all kinds of commands can be sent through.
If a focus is received, recipient "all" or <none>, this command is not erased upon reading, but it is erased
by the second focus sent out by anybody to 'all'.
Then specific commands can be sent to specific recipients, which will be erased upon receipt.


move reference exchange through bibleditweb. Use appropriate settings for that.

Store: http://bibledit.org/demo/setfocus.php?book=1&chapter=2&verse=3&versification=english
http://localhost/bibledit/setfocus.php?book=1&chapter=2&verse=4

Retrieve: http://bibledit.org/demo/getfocus.php?channel=bibledit&book=1&chapter=2&verse=3&versification=english
Retrieve versifications: http://bibledit.org/demo/versifications.php
Versification correction to be implemented upon storage, to it stores the 'original' versification.
Versification correction to be implemented upon retrieval.
On retrieving focus, there should be a stable focus for a second or so before it releases the new focus.
The channel is stored in the database, and acts like an independent focus provider.

getmessage2.php to be renamed to getmessage.php


Bibledit needs a preference where the web site is entered and tested, and where the versification is set.
Once done, it then needs to send this reference through setfocus.php.
The preferences dialog could be the current reference exchange one, since it already deals with that.








Objective: To display or edit Bibles.

Requirements:
- Manager can import USFM. When the \id does not exist yet as a book, it creates the book pasted in.
- If on import several books are pasted, i.e. several \id lines, it will handle that properly.
- Manager can export USFM.
- Synchronisation with git repository.
- Display Bibles on screen.
- Navigator integrated if needed, but when using frames, it is detached and occurs only once no matter how many Bibles
  display.
- Save snapshots.


Trimming snapshots takes too much time. We need to load all data in arrays, and operate from there,
so that only the delete operations affect the database, and since few will be deleted, this will go fast.


Whether the module runs in full screen, or in frames. If in frames it will have a goto bar, 
and in the full window it has the full header and footer.

Alternative to frames would be better, think of ssi (Server Side Includes)


There's one main site with an index pages and frames.
Within the frames applications run. This can be our own applications, or foreign ones.
Each application is independent and separate.

Messaging between applications and server for e.g. verse reference, and many other things, 
e.g. lists of verses to be sent to the references window.



The site needs to have the concept of Desktops. Users can create store and erase these. 
E.g. a desktop for editing, one for merging, etc.
The desktops contain any number of screens or tools that the translator or consultant can use.




















The book names are not localized as we do in bibledit-linux, but localization uses the existing mechanism.
It works through gettext. For that reason a php file needs to be created that contains all existing English books.
This file is to be generated somehow by the system admin, and this file can be stored among the source code.
Thus the gettext system will be filled with that data, and can get translated.
If somebody wants the localized Bible names, but does not translate the whole site, it suffices to only translate 
the relevant bits in the po file.




The timer had stopped running on bibledit.org/demo. Was caused by a stale table. 
Needs a setting to remove that table.
And needs a more robust handler, e.g. if the PID is no longer there it would remove the stale table contents.
Perhaps we need a 'timer'  setting, and the option to use cron tables as well for servers and those that like it,
but the poor man's crontab remains the default system.
If the timer runs, and it finds that ids PID differs from the one in the database, it then quits.









* There's one table that never changes, and it contains the current database schema version number, an integer.
* Each object that encapsulates a table also stores the actual version number as a constant. 
* It compares it with the stored version number, and if there are differences, it performs an upgrade.





Pay attention to internationalization.
We need to get gettext working, and so need to have accounts where the user can set his language.
The administrator sets the default language for the site for guests and before login.


On Ubuntu for extra locales, install packages like "language-pack-*". After installing a new pack, run "locale-gen" and restart Apache (sudo apache2ctl restart)
to make this new locale to take effect. This should go in the installation manual.


To go through the various php functions called and read the comments, and learn from it.
setlocale(LC_ALL, ""); Takes the locale from the environment.
Before setting the locale, the php page runs 'locale -a' to see the available locales on the system.
Then, it needs to check whether bibledit provides this translation, and advise the user appropriately.

A little function to test available locales on a sytem :
<?php
function list_system_locales(){
    ob_start();
    system('locale -a'); 
    $str = ob_get_contents();
    ob_end_clean();
    return split("\\n", trim($str));
}

$locale = "fr_FR.UTF8";
$locales = list_system_locales();

if(in_array($locale, $locales)){
        echo "yes yes yes....";
}else{
        echo "no no no.......";
}
?>


It may use the available locales for dates and number representation as are on the system, and use our own locales 
as come with the application.
These two catalogs are different.


When setting translation domains in the preferences, do a check on the functions' return values if it worked out well.


The administrator can leave the locale empty, in which case the system locale will be taken. This should be the default for local installations.



The site has one default translation, set by the site administrator. Visitors get to see this default translation.

The purpose of the site is to inform the public about a translation in progress and to sollicit their input.
The 'consultation notes' on the site work in a special way. Contributors are invited to open an account on the site in order to contribute.
Consultation notes can be assigned to one or more persons. If a note is assigned to a person, then this person gets emailed.
But also, more importantly, the person will get reminders after e.g. a week, two weeks, a month. The person can set the frequency of
the reminders but not less often than once a month or two months on the most. This is the result that persons get regularly reminded if their
note has not been resolved. It is more a task than a note. Persons should also be able to click the 'resolved' button, which will 
automatically unassign it to him, and re-assign it to the 'team'. Borrow reasonably from a tickets system that may already be there.
There is also an array of users whose response is requested for this ticket, and reminders go to them till they respond by email or switch 
this flag off: Don't bother me with this ticket. If this flag is switched off by them, then they are regarded to have responded without a vote.
There is an external email account where email responses can go to, and this account is regularly checked by bibledit.
The ticket / issues trackers differs in model to the current system. The current system shares the notes, but the new system has a ticket number, 
with a variety of comments to it, and status. See the standard ticets systems. There should be a way to import the old system into the new.
The new should be shared also.

Make our own modular system, loosely coupled, so that we create a new applicaton for each module, 
* and share the library for all, and any of our own classes.
All these applications together form "bibledit", a loosely coupled modular lot of software.




When running a local web server, as many will do, and syncing data files of projects and notes with bibledit's repository, 
Or better could be even to have bibledit to sync its files through the web server, so permission will never be a problem.


To have a Twitter module, that can send changes to twitter in a meaningful way.


To have a module that creates a new GoBible each hour if there were changes. The user also can request to make a module "now", 
which will be scheduled for the next minute. If there were no changes, it indicates this as well. There is also a very simple page for 
access from cell phones.


People with an account can subscribe to changes in the text, and to changes in the project notes. This is done in their account, under their
email preferences.


JavaScript library jquery.com is recommended.


Files in the web root should be given such a mode that these cannot be read from outside, only from inside.
This is: file permissions to -r--------.


The visitor to the site can see the default project, its text and comments. But to make comments, one has to get an account.
Those with an account have vastly improved opportonities on the site.


If a new version is installed, and routines are to be done, to be sure it always installs a file as a flag.
When this flag is found, the site says that after maintenance by the administrator it runs again (or similar).




















MySQL does not start on Ubuntu 9.10:
This problem can be solved by removing some mysql-related components :

sudo apt-get remove mysql-admin mysql-query-browser mysql-gui-tools-common mysql-client-5.0 libmysqlclient15off

and installing mysql server

sudo apt-get install mysql-server mysql-client mailutils



Windows: http://www.wampserver.com/
Or: http://www.apachefriends.org/en/xampp-windows.html


Being behind a shaking connection, the site should be operatable by email as well, in particular the consultations.


Instead of using XeTeX, we could also look at CSS2 with paged media for printing, and screen media for the screen.











