Index the notes:
- Do the conversion into new lines also for e.g. "<p " and "<div "
- Also test for and convert inline stuff like bold, italics, and font.
- Also test for and convert images and links.


<p>adminusername (Thu, 15 Nov 2012 15:30:34 +0000):</p>
<p>This is the second note.<div>It describes the second matter.</div><div>A second round of voting is needed. No need for a third, because the second vote is clear.</div></p>
<p>adminusername (Tue, 20 Nov 2012 06:56:49 +0000):</p>
<p>Here is <b>bold</b>, and here is <i>italics</i>.<div>Here is <sup>superscript</sup>&nbsp;and here is <sub>subscript</sub>.</div><div style="text-align: center;">Centered</div><div style="text-align: left;">Left justified</div><div style="text-align: left;"><ol><li>Numbered list.</li></ol>No numbered text.</div><div style="text-align: left;">Link to <a href="http://google.nl">http://google.nl</a>.</div><div style="text-align: left;">Here follows an image:&nbsp;<img src="http://localhost/image">.<br></div><h1>Header 1</h1><div>Normal text again below the header.</div></p>



Steps:
- Expand by indexing the Bible text.
- Can charset_table in sphinx.conf be automatically generated?
  Perhaps there's a unicode library (ICU) that finds case-folding characters,
  and lower and upper case characters. 
- We also want e.g. á to map to a, and A to map to a, and à to map to a, and so on.
- Indexing everything also takes the access level in account. This is how it works
  for the web pages? Each .tpl files is searched, and then it searches which php
  file calls that template. Then the access level of that php file is taken
  in consideration and stored when indexing that particular template.
  So a person with a certain access level only gets to see the permitted 
  search results.
  Indexing the notes and the bible text is easier: A known access level is added
  in the index for the notes, and for the Bible text.
- When creating the search.php try to use the Zend Framework view helpers,
  including the localization helpers, but they can be done slightly later.
- Perhaps the current login level should be supplied to the search.php,
  but not as search.php?level=x, because this is easy to fake. Better to POST
  it to the search.php. Then the search.php can use this access level to set
  this level for the current page. Or perhaps it's not needed, and the access
  level can be requested from the user who is logged in.
- Every once and a while there's some check on whether the daemon runs. Needed?
- As to the daemon running, we may do it like this: When the query fails because 
  it cannot connect to the host, then start the searchd daemon. Or give a message 
  that the manager should start the daemon, with a link or description for clarity.



Search really everything: Bibles, notes, menus, webpages.

The search results should be made extremely clear to see:
New lines are displayed as such.
Bible / Book / Chapter / Verse number in green.

It can use the main+delta indexing scheme for nearly realtime indexing.
Indexes the stuff at midnight into the main index.
Whenever something changes, a note or text, it indexes that in the delta index.

It indexes the notes from the database.
It indexes the text from the database, but this needs to be converted to html, or just to take the usfm out.
It indexes the standard pages of the website.















Provide information about how to create a searchable site, and how to separate the logic from the bibledit-web software.







Gtk3
http://developer.gnome.org/gtk3/stable/gtk-migrating-2-to-3.html
http://developer.gnome.org/gtk/2.24/

Do not include individual headers: Done.
Do not use deprecated symbols: Done.
Use accessor functions instead of direct access: Done.
Replace GDK_<keyname> with GDK_KEY_<keyname>: Done.















Produce, in 'members', and from outside, a searchable version, like the SC manuals.
Steps:
Improve the web version using code from the linked web version.
Each chapter gets a list of clickable parents at the top.
The Bible gets a list of Bible books, clickable.
Each book gets a list of clickable chapters.
Each chapter gets a list of clickable verses.
Every page gets a few anchors: Clickable Logo, Bible name, search entry.
Perhaps to have a switch on the site whether to enable / disable the search functions.
Use sphinxsearch
Crontab starts the search daemon, or ensures that it runs.









Make NDB and SHN Bibles searchable on the site. Version to TBS, and revised version.








Link the notes in Bibledit-Gtk to the notes in Bibledit-Web:
- No changes to Bibledit-Gtk
- Bibledit-Web accesses the git repository of Bibledit-Gtk's notes.
- bibledit-web gets logic that link the repository to the notes database.
- When doing send/receive on those notes, the output is taken, and processed, and actions taken.







BibleWorks -> eSword options: 
- Expand with html or rtf formatting and notes - this is done per line, not per chapter.
- Add some online help about how it works.


Convert USFM to USFX:
- Download and unzip http://haiola.org/haiola.zip
- Install mono-complete 
- Run mono usfm2usfx.exe -o output.xml *.usfm





Update the online help for the git repository to use a github https repository
due to firewall issues.
See 
http://stackoverflow.com/questions/5343068/is-there-a-way-to-skip-password-typing-when-using-https-github





Perhaps a function to restore a deleted bible from the snapshots,
so that accedentially deleted things can be restored.
