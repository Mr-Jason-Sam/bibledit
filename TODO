


















Provide information about how to create a searchable site, and how to separate the logic from the bibledit-web software.







Gtk3
http://developer.gnome.org/gtk3/stable/gtk-migrating-2-to-3.html
http://developer.gnome.org/gtk/2.24/

Do not include individual headers: Done.
Do not use deprecated symbols: Done.
Use accessor functions instead of direct access: Done.
Replace GDK_<keyname> with GDK_KEY_<keyname>: Done.















Produce, in 'members', and from outside, a searchable version, like the SC manuals.
Steps:
Improve the web version using code from the linked web version.
Each chapter gets a list of clickable parents at the top.
The Bible gets a list of Bible books, clickable.
Each book gets a list of clickable chapters.
Each chapter gets a list of clickable verses.
Every page gets a few anchors: Clickable Logo, Bible name, search entry.
Perhaps to have a switch on the site whether to enable / disable the search functions.
Use sphinxsearch
Crontab starts the search daemon, or ensures that it runs.









Make NDB and SHN Bibles searchable on the site. Version to TBS, and revised version.








Link the notes in Bibledit-Gtk to the notes in Bibledit-Web:
- No changes to Bibledit-Gtk
- Bibledit-Web accesses the git repository of Bibledit-Gtk's notes.
- bibledit-web gets logic that link the repository to the notes database.
- When doing send/receive on those notes, the output is taken, and processed, and actions taken.







BibleWorks -> eSword options: 
- Expand with html or rtf formatting and notes - this is done per line, not per chapter.
- Add some online help about how it works.


Convert USFM to USFX:
- Download and unzip http://haiola.org/haiola.zip
- Install mono-complete 
- Run mono usfm2usfx.exe -o output.xml *.usfm





Update the online help for the git repository to use a github https repository
due to firewall issues.
See 
http://stackoverflow.com/questions/5343068/is-there-a-way-to-skip-password-typing-when-using-https-github





Perhaps a function to restore a deleted bible from the snapshots,
so that accedentially deleted things can be restored.






Bibledit-Gtk
To get a template with all \c's and \v's in Bibledit, make the project you want them to go into active, then from File menu choose Project-->Properties. 
There's a button labeled "+ Templates" under a heading "Add Books."
It also requires waiting for a tiny dialog with a progress bar in it to show something (in the meantime, it wasn't clear it was a progress bar in it). 
And even then I found you have to explicitly choose the book once the template is in it (but nothing tells you the template is in it - 
and then you have to choose a chapter and a non-zero verse number, before you see what you thought you should. 
Improving the user experience would be helpful. 
Clear simple interfaces, and easy to find documentation, are very important for user acceptability. 
For instance, if a template is chosen, BE should, after inserting it, present the results in BE in such a way that the user sees immediate feedback that it is there. 
So the book should appear in the interface, with chapter 1 verse 1 chosen automatically so that the list of markers shows.




Bibledit-Web.
When the .pid file of searchd is removed from e.g. /tmp or wherever it might be,
then the system tries to start searchd, but fails, and also the rotation of the
index does not work. Try to fix it by probably killing searchd before restarting
it when the .pid file is not found.




There are some warnings when compiling Bibledit-Gtk.
bibledit.cpp: In function â€˜int main(int, char**)â€™:
bibledit.cpp:62:3: warning: â€˜void g_thread_init(gpointer)â€™ is deprecated (declared at /usr/include/glib-2.0/glib/deprecated/gthread.h:259) [-Wdeprecated-declarations]
bibledit.cpp:62:21: warning: â€˜void g_thread_init(gpointer)â€™ is deprecated (declared at /usr/include/glib-2.0/glib/deprecated/gthread.h:259) [-Wdeprecated-declarations]
windowsoutpost.cpp: In member function â€˜void WindowsOutpost::Start()â€™:
windowsoutpost.cpp:79:3: warning: â€˜GThread* g_thread_create(GThreadFunc, gpointer, gboolean, GError**)â€™ is deprecated (declared at /usr/include/glib-2.0/glib/deprecated/gthread.h:100): Use 'g_thread_new' instead [-Wdeprecated-declarations]
windowsoutpost.cpp:79:73: warning: â€˜GThread* g_thread_create(GThreadFunc, gpointer, gboolean, GError**)â€™ is deprecated (declared at /usr/include/glib-2.0/glib/deprecated/gthread.h:100): Use 'g_thread_new' instead [-Wdeprecated-declarations]
httpd.cpp: In constructor â€˜Httpd::Httpd(bool)â€™:
httpd.cpp:41:3: warning: â€˜GThread* g_thread_create(GThreadFunc, gpointer, gboolean, GError**)â€™ is deprecated (declared at /usr/include/glib-2.0/glib/deprecated/gthread.h:100): Use 'g_thread_new' instead [-Wdeprecated-declarations]
httpd.cpp:41:73: warning: â€˜GThread* g_thread_create(GThreadFunc, gpointer, gboolean, GError**)â€™ is deprecated (declared at /usr/include/glib-2.0/glib/deprecated/gthread.h:100): Use 'g_thread_new' instead [-Wdeprecated-declarations]
displayprojectnotes.cpp: In constructor â€˜DisplayProjectNotes::DisplayProjectNotes(const ustring&, GtkWidget*, std::vector<unsigned int>*, unsigned int&)â€™:
displayprojectnotes.cpp:45:3: warning: â€˜GThread* g_thread_create(GThreadFunc, gpointer, gboolean, GError**)â€™ is deprecated (declared at /usr/include/glib-2.0/glib/deprecated/gthread.h:100): Use 'g_thread_new' instead [-Wdeprecated-declarations]
displayprojectnotes.cpp:45:73: warning: â€˜GThread* g_thread_create(GThreadFunc, gpointer, gboolean, GError**)â€™ is deprecated (declared at /usr/include/glib-2.0/glib/deprecated/gthread.h:100): Use 'g_thread_new' instead [-Wdeprecated-declarations]
editor.cpp: In member function â€˜void Editor2::highlight_searchwords()â€™:
editor.cpp:1665:3: warning: â€˜GThread* g_thread_create(GThreadFunc, gpointer, gboolean, GError**)â€™ is deprecated (declared at /usr/include/glib-2.0/glib/deprecated/gthread.h:100): Use 'g_thread_new' instead [-Wdeprecated-declarations]
editor.cpp:1665:83: warning: â€˜GThread* g_thread_create(GThreadFunc, gpointer, gboolean, GError**)â€™ is deprecated (declared at /usr/include/glib-2.0/glib/deprecated/gthread.h:100): Use 'g_thread_new' instead [-Wdeprecated-declarations]
vcs.cpp: In constructor â€˜VCS::VCS(bool)â€™:
vcs.cpp:43:3: warning: â€˜GThread* g_thread_create(GThreadFunc, gpointer, gboolean, GError**)â€™ is deprecated (declared at /usr/include/glib-2.0/glib/deprecated/gthread.h:100): Use 'g_thread_new' instead [-Wdeprecated-declarations]
vcs.cpp:43:73: warning: â€˜GThread* g_thread_create(GThreadFunc, gpointer, gboolean, GError**)â€™ is deprecated (declared at /usr/include/glib-2.0/glib/deprecated/gthread.h:100): Use 'g_thread_new' instead [-Wdeprecated-declarations]



Idea (whether realistic or not):
Write simple Android app that displays web pages with Bibles, and remembers where it was last.
Let Bibledit-Web create an adopted app every night with the updated text of a Bible.




The main search entry searches everything. 
How to limit searches to e.g. notes only, or bible texts only?
Separate search entries under Consultations / Translation?
Options to tick / advanced search?
Selection to make on the search hits page? This one looks cool. Buttons / links?




Near real-time searching.
Sphinxsearch can use the main+delta indexing scheme for nearly realtime indexing.
Indexes the stuff at midnight into the main index.
Whenever something changes, a note or text, it indexes that in the delta index.


