#!/bin/bash


# Run this script from the directory where it is located: ./debug.
# Prerequisites:
# Android SDK for Mac OS X.
# Apache Ant: port install apache-ant.


# Export environment variables to find the Android SDK and NDK tools.
export ANDROID_HOME=~/scr/android-sdk-macosx
export PATH=$PATH:~/scr/android-sdk-macosx/platform-tools:~/scr/android-sdk-macosx/tools:~/scr/android-ndk-r10e


# Refresh the bibledit-web source code in the assets.
rsync -a --exclude '*.o' --delete ../lib/* jni
rm -f jni/bibledit
rm -rf jni/autom4te.cache
rm -f jni/dev
rm -f jni/*.a
rm -f jni/reconfigure
rm -f jni/server
rm -f jni/unittest
rm -f jni/valgrind
rm -rf jni/xcode
rm -rf jni/executable


# The following command saves all source files from Makefile.am to file.
# It uses several steps to obtain the result:
# * Obtain source files between the correct patterns.
# * Remove first line.
# * Remove last line.
# * Remove tabs.
# * Remove new lines.
# * Remove backslashes.
sed -n "/libbibledit_a_SOURCES/,/bin_PROGRAMS/p" jni/Makefile.am | tail -n +2 | sed '$d' | strings | tr -d '\n' | sed 's/\\//g' > jni/sources.txt


# Create Android Makefile.
rm -f jni/Android.mk
echo 'LOCAL_PATH:= $(call my-dir)' >> jni/Android.mk
echo 'include $(CLEAR_VARS)' >> jni/Android.mk
echo 'LOCAL_MODULE := libbibledit' >> jni/Android.mk
# echo 'LOCAL_SRC_FILES := bibledit.cpp' >> jni/Android.mk
echo -n 'LOCAL_SRC_FILES := ' >> jni/Android.mk
cat jni/sources.txt >> jni/Android.mk
echo 'include $(BUILD_STATIC_LIBRARY)' >> jni/Android.mk
echo 'include $(CLEAR_VARS)' >> jni/Android.mk
echo 'LOCAL_MODULE    := libjavawrapper' >> jni/Android.mk
echo 'LOCAL_SRC_FILES := javawrapper.c' >> jni/Android.mk
echo 'LOCAL_STATIC_LIBRARIES := libbibledit' >> jni/Android.mk
echo 'include $(BUILD_SHARED_LIBRARY)' >> jni/Android.mk


# Fix this: [aapt] (skipping file '.htaccess' due to ANDROID_AAPT_IGNORE pattern '.*')
# Rename all files ".htaccess" to "dot.htaccess".
# This is going to be reverted in the Java code during installation.
# find assets -type f -name '.*' | while read file
# do
#   basename="${file##*/}"
#   mv "$file" "${file%/*}/dotdot.${basename#.}"
# done


# Remove items from the setup that do not run on the android device, or are not needed there:
# * Skip crontab setup.
# sed -i '/timer.php/d' assets/external/bibledit-web/setup/step.php
# sed -i '/crontab.php/d' assets/external/bibledit-web/setup/step.php
# * Skip server / client mode, set client mode.
# sed -i '/client1.php/d' assets/external/bibledit-web/setup/step.php
# * No check on crontab and php cli binaries..
# sed -i  's/$crontab && $php/true/g' assets/external/bibledit-web/setup/binaries.php


# Retrieve the Bibledit-Web version number from the PHP sources and store it in the strings.xml.
# VERSION=`cat assets/external/bibledit-web/config/version.php  | grep version | cut -d'"' -f2`
# sed -i "/version_number/c\\  <string name=\"version_number\">$VERSION</string>" res/values/strings.xml


# Disable the Filter_Cli class as on Android it is not the shell that runs the regular tasks, but the web server.
# sed -i '/php_sapi_name/d' assets/external/bibledit-web/filter/cli.php


# Build native code.
# https://developer.android.com/tools/sdk/ndk/index.html
ndk-build clean
ndk-build
EXIT_CODE=$?
if [ $EXIT_CODE != 0 ]; then
  exit
fi
exit


# Clean binaries.
ant clean
EXIT_CODE=$?
if [ $EXIT_CODE != 0 ]; then
  exit
fi


# Create assets index.
# ant createAssetIndexExternal


# Build source.
ant debug
EXIT_CODE=$?
if [ $EXIT_CODE != 0 ]; then
  exit
fi


# Clear and uninstall previous version.
adb shell pm clear org.bibledit.android
adb shell pm uninstall -k org.bibledit.android


# Install it.
adb install -r bin/Bibledit-debug.apk


# Start it.
adb shell am start -a android.intent.action.MAIN -n org.bibledit.android/.MainActivity


