This is going to be a version of Bibledit that runs on all relevant platforms.

The developer transforms Bibledit-Web, written in PHP, with minimal effort, into C++.

A main reason is that PHP is not well suited to the mobile platforms like Android and in particular iOS.
On iOS it was possible to compile stock PHP without errors, 
but newer versions of PHP, like 5.6, crashed, 
and older versions, like 5.4 left out symbols which crippled the library.
When everything is written in C or in C++, it can be compiled for the mobile devices without problems.

Another reason for switching to C++ is that when it runs on a server,
it requires less server memory and places a lower demand on the CPU.
And such a server is less expensive to rent.
And for mobile platforms, the battery will last longer.
According to one benchmark, PHP is 5461% slower than C++.

Other developers and other companies also switch from PHP to C++ for 
reasons of making it cross-platform and for going beyond what PHP can do.

For mobile platforms it is easier to include all dependent libraries in source form.
For example, include sqlite.h and sqlite.c to get SQLite support.

Platform iOS needs static libraries so libbibledit.a needs to be a static library.

The Bibledit library runs a webserver.

Since Bibledit is going to run as a server, it may run for years without interruption.
Therefore it is imperative that it leaks no memory at all.
Keep it valgrind clean.

Sqlite:
Download sqlite-dll-win32-x86-3080701 from sqlite.org.
Via the Windows start button, type Visual Studio, and then choose Visual Studio Tools. 
In File Explorer, choose Developer Command Prompt for VS2013.
In the command line window, enter, for example:
lib /DEF:sqlite3.def /OUT:sqlite3.lib
In the Solution Explorer window, right-click on your project, add the "sqlite3.lib" file.

LibXml2:
Download from ftp://ftp.zlatkovic.com/libxml/
zlib-1.2.5
libxml2-2.7.8.win32
iconv-1.9.2.win32
In the Solution Explorer window, right-click on your project, add the "libxml2.lib" file.

